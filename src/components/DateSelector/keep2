import React, { useState, useEffect, useCallback } from 'react';
import { format } from 'date-fns';
import StaticDatePickerLandscape from '../Calend/Calend';
 import useFetchData from '../../CustomHooks/useFetchData';
import './DateSelector.css'

console.log("DateSelector rendered");
function DateSelector({ handleAppointmentSelect }) {
    // !states
    const [appointments, setAppointments] = useState([]);
    const [selectedAppointment, setSelectedAppointment] = useState(null);
    const [selectedDate, setSelectedDate] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);

        const {fetchAppointments}=useFetchData(selectedDate); //inorder to use the customHook.

    // // !Handlers
    // const handleDateChange = (date) => { setSelectedDate(date); };
    
    // const setNewSelectedItem = (appointment) => {
    //     selectedAppointment === appointment ? setSelectedAppointment(null) : setSelectedAppointment(appointment);
    // };
    
    // const {fetchAppointments}=useFetchData(selectedDate); //inorder to use the customHook.


    // // !Make request
    // useEffect(() => {
    //     if (!selectedDate) return;

    //     setIsLoading(true);
    //     setError(null);

    //     console.log(selectedDate);

    //     fetchAppointments(selectedDate)
    //         .then((appointmentsData) => {
    //             setAppointments(appointmentsData);
    //             setIsLoading(false);
    //         })
    //         .catch((error) => {
    //             console.error(error);
    //             setError('An error occurred while fetching appointments.');
    //             setIsLoading(false);
    //         });
    // }, [selectedDate]);

    // const handleAppointmentSelectCallback = useCallback(handleAppointmentSelect, [handleAppointmentSelect]);
    // //will recreate only if function change.

    // useEffect(() => {
    //     handleAppointmentSelectCallback(selectedAppointment);
    //     console.log("data selectorFile:", selectedAppointment);
    //     // eslint-disable-next-line
    // }, [selectedAppointment]);



    return (
        <div className="BookContainer">
            <div className="leftSide">
                <StaticDatePickerLandscape
                    handleDateChange={handleDateChange}
                    selectedDate={selectedDate}
                />
            </div>
            <div className="rightSide">
                {isLoading ? (
                    <div className="Loading">Loading...</div>
                ) : (
                    <div className="AvailableHours">
                        {error ? (
                            <div className="Error">{error}</div>
                        ) : appointments.length === 0 ? (
                            <div className="Message">No appointments available.</div>
                        ) : (
                            appointments.map((appointment) => (
                                <div
                                    className={`AppointmentItem ${appointment === selectedAppointment ? 'selected' : ''}`}
                                    key={appointment.AppointmentID+1}
                                    onClick={() => setNewSelectedItem(appointment)}
                                >
                                    <div className="BarberName">Barber Name: {appointment.name}</div>
                                    <div className="Date">Date: {format(new Date(appointment.Date), 'yyyy-MM-dd')}</div>
                                    <div className="StartTime">Start Time: {appointment.Hours}</div>
                                </div>
                            ))

                        )}
                    </div>
                )}
            </div>
        </div>
    );
}
export default DateSelector;





// import React from 'react';
// import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
// import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
// import { StaticDatePicker } from '@mui/x-date-pickers/StaticDatePicker';

// export default function StaticDatePickerLandscape({ handleDateChange, selectedDate, currentDate }) {
//   // Define a helper function to check if a date is before the current date
//   const isBeforeCurrentDate = (date) => {
//     return date.isBefore(currentDate, 'day'); // Assuming the selectedDate and currentDate are Dayjs objects
//   };

//   return (
//     <LocalizationProvider dateAdapter={AdapterDayjs}>
//       <StaticDatePicker
//         className="calendar-header" 
//         orientation="portrait"
//         value={selectedDate}
//         onChange={(date) => {
//           // Only update the selected date if it's not before the current date
//           if (!isBeforeCurrentDate(date)) {
//             handleDateChange(date);
//           }
//         }}
//         componentsProps={{ actionBar: { actions: [] } }}
//         shouldDisableDate={(date) => isBeforeCurrentDate(date)} // Disable previous dates in the date picker
//       />
//     </LocalizationProvider>
//   );
// }
